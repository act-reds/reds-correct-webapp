generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name  String?
  email String  @unique

  UserComponent UserComponent[]
}

model Component {
  id            Int             @id @default(autoincrement())
  name          String?
  UserComponent UserComponent[]
}

model UserComponent {
  userId      Int
  componentId Int
  user        User      @relation(fields: [userId], references: [id])
  component   Component @relation(fields: [componentId], references: [id])

  @@id([userId, componentId]) // Composite primary key
}

model Course {
  id         Int               @id @default(autoincrement())
  name       String
  year       Int
  assistants CourseAssistant[] // Many-to-many with Assistant
  classes    Class[] // Optional if you want to reference from Course

  @@unique([name, year]) // Ensures that the same course name and year cannot be duplicated
}

model Class {
  id         Int              @id @default(autoincrement())
  name       String
  courseId   Int
  course     Course           @relation(fields: [courseId], references: [id])
  students   ClassStudent[]  
  assistants ClassAssistant[] // Many-to-many with Assistant
  labs       Lab[]

  @@unique([name, courseId])
}

model Student {
  id        Int              @id @default(autoincrement())
  name      String
  formation String
  mode      String
  mail      String           @unique
  classes   ClassStudent[]   
}

model ClassStudent {
  classId   Int
  studentId Int
  class     Class   @relation(fields: [classId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@id([classId, studentId])
}


model Lab {
  id      Int    @id @default(autoincrement())
  name    String
  classId Int
  class   Class  @relation(fields: [classId], references: [id])

  @@unique([name, classId]) // Ensures that no two labs within the same class have the same name
}

model Assistant {
  id      Int               @id @default(autoincrement())
  mail    String            @unique
  courses CourseAssistant[] // Many-to-many with Course
  classes ClassAssistant[] // Many-to-many with Class
}

// Junction table for Assistant <-> Course many-to-many relationship
model CourseAssistant {
  courseId    Int
  assistantId Int
  course      Course    @relation(fields: [courseId], references: [id])
  assistant   Assistant @relation(fields: [assistantId], references: [id])

  @@id([courseId, assistantId]) // Composite primary key
}

// Junction table for Assistant <-> Class many-to-many relationship
model ClassAssistant {
  classId     Int
  assistantId Int
  class       Class     @relation(fields: [classId], references: [id])
  assistant   Assistant @relation(fields: [assistantId], references: [id])

  @@id([classId, assistantId]) // Composite primary key
}

model Grid {
  id      Int             @id @default(autoincrement())
  name    String          @unique
  sections Section[]
}

model Section {
  id      Int              @id @default(autoincrement())
  name    String
  weight  Float
  gridId  Int
  grid    Grid             @relation(fields: [gridId], references: [id])
  subsections SubSection[]
}

model SubSection {
  id          Int          @id @default(autoincrement())
  name        String
  weight      Float   
  criterion   String
  sectionId   Int 
  section     Section      @relation(fields: [sectionId], references: [id])
}


